nextflow_pipeline {

    name "Metadata Transformation Testing"
    script "main.nf"

    test("Basic lock") {
        tag "pipeline_basic_lock"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/basic.csv"
                outdir = "results"

                transformation = "lock"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check Transformation (Machine-Readable)
            def transformation = path("$launchDir/results/transformation/transformation.csv")
            assert transformation.exists()

            assert transformation.text.contains("sample,metadata_1,metadata_2,metadata_3,metadata_4,metadata_5,metadata_6,metadata_7,metadata_8")
            assert transformation.text.contains("sample1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8")
            assert transformation.text.contains("sample2,2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8")
            assert transformation.text.contains("sample3,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8")

            // Check Results (Human-Readable)
            def results = path("$launchDir/results/transformation/results.csv")
            assert results.exists()

            assert results.text.contains("sample,sample_name,metadata_1,metadata_2,metadata_3,metadata_4,metadata_5,metadata_6,metadata_7,metadata_8")
            assert results.text.contains("sample1,ABC,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8")
            assert results.text.contains("sample2,DEF,2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8")
            assert results.text.contains("sample3,GHI,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8")

            // Check IRIDA Next JSON Output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "transformation/results.csv" }.size() == 1

            assert iridanext_metadata.size() == 3

            assert iridanext_metadata.containsKey("sample1")
            assert iridanext_metadata.sample1.metadata_1 == "1.1"
            assert iridanext_metadata.sample1.metadata_2 == "1.2"
            assert iridanext_metadata.sample1.metadata_3 == "1.3"
            assert iridanext_metadata.sample1.metadata_4 == "1.4"
            assert iridanext_metadata.sample1.metadata_5 == "1.5"
            assert iridanext_metadata.sample1.metadata_6 == "1.6"
            assert iridanext_metadata.sample1.metadata_7 == "1.7"
            assert iridanext_metadata.sample1.metadata_8 == "1.8"

            assert iridanext_metadata.containsKey("sample2")
            assert iridanext_metadata.sample2.metadata_1 == "2.1"
            assert iridanext_metadata.sample2.metadata_2 == "2.2"
            assert iridanext_metadata.sample2.metadata_3 == "2.3"
            assert iridanext_metadata.sample2.metadata_4 == "2.4"
            assert iridanext_metadata.sample2.metadata_5 == "2.5"
            assert iridanext_metadata.sample2.metadata_6 == "2.6"
            assert iridanext_metadata.sample2.metadata_7 == "2.7"
            assert iridanext_metadata.sample2.metadata_8 == "2.8"

            assert iridanext_metadata.containsKey("sample3")
            assert iridanext_metadata.sample3.metadata_1 == "3.1"
            assert iridanext_metadata.sample3.metadata_2 == "3.2"
            assert iridanext_metadata.sample3.metadata_3 == "3.3"
            assert iridanext_metadata.sample3.metadata_4 == "3.4"
            assert iridanext_metadata.sample3.metadata_5 == "3.5"
            assert iridanext_metadata.sample3.metadata_6 == "3.6"
            assert iridanext_metadata.sample3.metadata_7 == "3.7"
            assert iridanext_metadata.sample3.metadata_8 == "3.8"
        }
    }

    test("Invalid transformation") {
        tag "pipeline_invalid_transformation"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/basic.csv"
                outdir = "results"

                transformation = "UNKNOWN123"
            }
        }

        then {
            assert workflow.failed
            def output = workflow.stdout.join("\n")
            assert output.contains("Validation of pipeline parameters failed!")
        }
    }

    test("Null transformation") {
        tag "pipeline_null_transformation"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/basic.csv"
                outdir = "results"

                transformation = null
            }
        }

        then {
            assert workflow.failed
            def output = workflow.stdout.join("\n")
            assert output.contains("Unspecified transformation '--transformation'. Exiting now.")
        }
    }

    test("Basic lock - missing metadata") {
        tag "pipeline_missing_metadata"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/missing_metadata.csv"
                outdir = "results"

                transformation = "lock"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check Transformation (Machine-Readable)
            def transformation = path("$launchDir/results/transformation/transformation.csv")
            assert transformation.exists()

            assert transformation.text.contains("sample,metadata_1,metadata_2,metadata_3,metadata_4,metadata_5,metadata_6,metadata_7,metadata_8")
            assert transformation.text.contains("sample1,,1.2,1.3,,1.5,1.6,,1.8")
            assert transformation.text.contains("sample2,2.1,,2.3,2.4,,2.6,2.7,")
            assert transformation.text.contains("sample3,3.1,3.2,,3.4,3.5,,3.7,3.8")

            // Check Results (Human-Readable)
            def results = path("$launchDir/results/transformation/results.csv")
            assert results.exists()

            assert results.text.contains("sample,sample_name,metadata_1,metadata_2,metadata_3,metadata_4,metadata_5,metadata_6,metadata_7,metadata_8")
            assert results.text.contains("sample1,ABC,,1.2,1.3,,1.5,1.6,,1.8")
            assert results.text.contains("sample2,sample2,2.1,,2.3,2.4,,2.6,2.7,")
            assert results.text.contains("sample3,GHI,3.1,3.2,,3.4,3.5,,3.7,3.8")

            // Check IRIDA Next JSON Output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "transformation/results.csv" }.size() == 1

            assert iridanext_metadata.size() == 3

            assert iridanext_metadata.containsKey("sample1")
            assert iridanext_metadata.sample1.metadata_1 == ""
            assert iridanext_metadata.sample1.metadata_2 == "1.2"
            assert iridanext_metadata.sample1.metadata_3 == "1.3"
            assert iridanext_metadata.sample1.metadata_4 == ""
            assert iridanext_metadata.sample1.metadata_5 == "1.5"
            assert iridanext_metadata.sample1.metadata_6 == "1.6"
            assert iridanext_metadata.sample1.metadata_7 == ""
            assert iridanext_metadata.sample1.metadata_8 == "1.8"

            assert iridanext_metadata.containsKey("sample2")
            assert iridanext_metadata.sample2.metadata_1 == "2.1"
            assert iridanext_metadata.sample2.metadata_2 == ""
            assert iridanext_metadata.sample2.metadata_3 == "2.3"
            assert iridanext_metadata.sample2.metadata_4 == "2.4"
            assert iridanext_metadata.sample2.metadata_5 == ""
            assert iridanext_metadata.sample2.metadata_6 == "2.6"
            assert iridanext_metadata.sample2.metadata_7 == "2.7"
            assert iridanext_metadata.sample2.metadata_8 == ""

            assert iridanext_metadata.containsKey("sample3")
            assert iridanext_metadata.sample3.metadata_1 == "3.1"
            assert iridanext_metadata.sample3.metadata_2 == "3.2"
            assert iridanext_metadata.sample3.metadata_3 == ""
            assert iridanext_metadata.sample3.metadata_4 == "3.4"
            assert iridanext_metadata.sample3.metadata_5 == "3.5"
            assert iridanext_metadata.sample3.metadata_6 == ""
            assert iridanext_metadata.sample3.metadata_7 == "3.7"
            assert iridanext_metadata.sample3.metadata_8 == "3.8"
        }
    }
}
