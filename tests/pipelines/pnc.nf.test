nextflow_pipeline {

    name "Metadata Transformation: PNC"
    script "main.nf"

    test("Specification") {
        tag "pipeline_pnc"
        tag "pipeline_pnc_basic"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/pnc/specification.csv"
                outdir = "results"

                transformation = "pnc"

                metadata_1_header = "isolate_received_date"
                metadata_2_header = "isolation_date"
                metadata_3_header = "sample_collection_date"
                metadata_4_header = "sample_received_date_collaborator"
                metadata_5_header = "sample_received_date_nml"
                metadata_6_header = "sequencing_date"
                metadata_7_header = "host_age"
                metadata_8_header = "host_age_unit"
                metadata_9_header = "host_date_of_birth_DOB"
                metadata_10_header = "host_scientific_name"
                metadata_11_header = "host_common_name"
                metadata_12_header = "food_product"
                metadata_13_header = "environmental_material"
                metadata_14_header = "environmental_site"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check Transformation (Machine-Readable)
            def transformation = path("$launchDir/results/transformation/transformation.csv")
            assert transformation.exists()

            assert transformation.text.contains("sample,calc_source_type,calc_earliest_date,calc_host_age")
            assert transformation.text.contains("sample1,Human,2025-02-01,0.0841")
            assert transformation.text.contains("sample2,Human,2025-04-11,0.1370")
            assert transformation.text.contains("sample3,Human,2025-08-11,40")
            assert transformation.text.contains("sample4,Human,2025-02-01,0.0833")
            assert transformation.text.contains("sample5,Human,2025-04-11,0.2466")
            assert transformation.text.contains("sample6,Human,2025-08-11,40")
            assert transformation.text.contains("sample7,Human,2025-02-01,0.0833")
            assert transformation.text.contains("sample8,Human,2025-04-11,0.2466")
            assert transformation.text.contains("sample9,Human,2025-08-11,40")
            assert transformation.text.contains("sample10,Human,2025-02-01,0.0833")
            assert transformation.text.contains("sample11,Human,2025-04-11,0.2466")
            assert transformation.text.contains("sample12,Human,,10")
            assert transformation.text.contains("sample13,Human,,")
            assert transformation.text.contains("sample14,Human,,")
            assert transformation.text.contains("sample15,Human,,10")
            assert transformation.text.contains("sample16,Human,,")
            assert transformation.text.contains("sample17,Human,,")
            assert transformation.text.contains("sample18,Human,,")
            assert transformation.text.contains("sample19,Human,,")
            assert transformation.text.contains("sample20,Human,,10")
            assert transformation.text.contains("sample21,Human,,10")
            assert transformation.text.contains("sample22,Human,,10")
            assert transformation.text.contains("sample23,Human,1800-01-01,10")
            assert transformation.text.contains("sample24,Human,2025-05-01,10")
            assert transformation.text.contains("sample25,Human,1800-01-01,10")
            assert transformation.text.contains("sample26,Host Conflict,2020-01-12,")
            assert transformation.text.contains("sample27,Host Conflict,1998-06-15,")
            assert transformation.text.contains("sample28,Animal,1900-01-01,")
            assert transformation.text.contains("sample29,Animal,1899-12-31,")
            assert transformation.text.contains("sample30,Animal,,")
            assert transformation.text.contains("sample31,Animal,2019-12-22,")
            assert transformation.text.contains("sample32,Animal,2017-06-14,")
            assert transformation.text.contains("sample33,Animal,2019-07-12,0.0962")
            assert transformation.text.contains("sample34,Animal,2018-01-08,")
            assert transformation.text.contains("sample35,Animal,2015-06-30,")
            assert transformation.text.contains("sample36,Animal,2013-06-19,")
            assert transformation.text.contains("sample37,Animal,2011-03-20,")
            assert transformation.text.contains("sample38,Animal,2008-07-01,")
            assert transformation.text.contains("sample39,Animal,2008-09-19,")
            assert transformation.text.contains("sample40,Animal,2008-05-22,")
            assert transformation.text.contains("sample41,Animal,2005-08-03,")
            assert transformation.text.contains("sample42,Animal,2006-05-14,")
            assert transformation.text.contains("sample43,Food,2006-09-06,")
            assert transformation.text.contains("sample44,Food,2006-03-30,")
            assert transformation.text.contains("sample45,Food,2005-11-18,")
            assert transformation.text.contains("sample46,Food,2005-09-25,")
            assert transformation.text.contains("sample47,Food,2005-04-27,")
            assert transformation.text.contains("sample48,Food,2006-02-25,")
            assert transformation.text.contains("sample49,Food,2007-06-29,")
            assert transformation.text.contains("sample50,Food,2006-11-24,")
            assert transformation.text.contains("sample51,Food,2006-05-22,")
            assert transformation.text.contains("sample52,Food,2007-09-26,")
            assert transformation.text.contains("sample53,Food,2008-04-08,")
            assert transformation.text.contains("sample54,Food,2006-08-16,")
            assert transformation.text.contains("sample55,Food,2007-10-12,")
            assert transformation.text.contains("sample56,Food,2007-01-06,")
            assert transformation.text.contains("sample57,Food,2005-10-09,")
            assert transformation.text.contains("sample58,Environmental,2006-11-01,")
            assert transformation.text.contains("sample59,Environmental,2006-08-16,")
            assert transformation.text.contains("sample60,Environmental,2006-02-26,")
            assert transformation.text.contains("sample61,Environmental,2004-09-13,")
            assert transformation.text.contains("sample62,Environmental,2004-11-10,")
            assert transformation.text.contains("sample63,Environmental,2002-12-23,")
            assert transformation.text.contains("sample64,Environmental,2001-05-14,")
            assert transformation.text.contains("sample65,Environmental,2003-07-21,")
            assert transformation.text.contains("sample66,Environmental,2004-10-31,")
            assert transformation.text.contains("sample67,Environmental,2005-03-26,")
            assert transformation.text.contains("sample68,Environmental,2003-08-12,")
            assert transformation.text.contains("sample69,Environmental,2003-10-24,")
            assert transformation.text.contains("sample70,Environmental,2002-09-07,")
            assert transformation.text.contains("sample71,Environmental,2003-11-07,")
            assert transformation.text.contains("sample72,Unknown,2002-06-10,")
            assert transformation.text.contains("sample73,Human,2001-03-21,")
            assert transformation.text.contains("sample74,Human,2001-01-26,")

            // Check Results (Human-Readable)
            def results = path("$launchDir/results/transformation/results.csv")
            assert results.exists()

            assert results.text.contains("sample,host_scientific_name,host_common_name,food_product,environmental_site,environmental_material,calc_source_type,calc_source_type_valid,calc_source_type_error,isolate_received_date,isolation_date,sample_collection_date,sample_received_date_collaborator,sample_received_date_nml,sequencing_date,calc_earliest_date,calc_earliest_date_valid,calc_earliest_date_error,host_date_of_birth_DOB,host_age,host_age_unit,calc_host_age,calc_host_age_valid,calc_host_age_error")
            assert results.text.contains("sample1,Homo sapiens (Human),Human NCBITaxon:9606,Not Applicable,Not Applicable,Not Applicable,Human,True,,2025-03-01,2025-02-15,2025-02-01,,2025-03-02,2025-03-15,2025-02-01,True,,2025-01-01,1,month,0.0841,True,")

            // Check IRIDA Next JSON Output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "transformation/results.csv" }.size() == 1

            //assert iridanext_metadata.size() == 29

            assert iridanext_metadata.containsKey("sample1")
            assert iridanext_metadata.sample1.calc_source_type == "Human"
            assert iridanext_metadata.sample1.calc_earliest_date == "2025-02-01"
            assert iridanext_metadata.sample1.calc_host_age == "0.0841"
        }
    }
}
