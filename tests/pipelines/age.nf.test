nextflow_pipeline {

    name "Metadata Transformation: Age"
    script "main.nf"

    test("Basic") {
        tag "pipeline_age"
        tag "pipeline_age_basic"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/age/basic.csv"
                outdir = "results"

                transformation = "age"
                metadata_1_header "date_of_birth"
                metadata_2_header "collection_date"
                age_header "age_at_collection"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check Transformation (Machine-Readable)
            def transformation = path("$launchDir/results/transformation/transformation.csv")
            assert transformation.exists()

            assert transformation.text.contains("sample,age_at_collection")
            assert transformation.text.contains("sample1,0.0000")
            assert transformation.text.contains("sample2,0.0027")
            assert transformation.text.contains("sample3,0.2493")
            assert transformation.text.contains("sample4,1.0000")
            assert transformation.text.contains("sample5,1.2493")
            assert transformation.text.contains("sample6,2")
            assert transformation.text.contains("sample7,2")
            assert transformation.text.contains("sample8,24")
            assert transformation.text.contains("sample9,49")

            // Check Results (Human-Readable)
            def results = path("$launchDir/results/transformation/results.csv")
            assert results.exists()

            assert results.text.contains("sample,sample_name,date_of_birth,collection_date,age_at_collection,age_at_collection_valid,age_at_collection_error")
            assert results.text.contains("sample1,ABC,2000-01-01,2000-01-01,0.0000,True,")
            assert results.text.contains("sample2,DEF,2000-01-01,2000-01-02,0.0027,True,")
            assert results.text.contains("sample3,GHI,2000-01-01,2000-04-01,0.2493,True,")
            assert results.text.contains("sample4,JKL,2000-01-01,2000-12-31,1.0000,True,")
            assert results.text.contains("sample5,MNO,2000-01-01,2001-04-01,1.2493,True,")
            assert results.text.contains("sample6,PQR,2000-01-01,2001-12-31,2,True,")
            assert results.text.contains("sample7,STU,2000-01-01,2002-01-01,2,True,")
            assert results.text.contains("sample8,VWX,2000-02-29,2024-02-29,24,True,")
            assert results.text.contains("sample9,YZ,1950-12-31,2000-05-05,49,True,")

            // Check IRIDA Next JSON Output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "transformation/results.csv" }.size() == 1

            assert iridanext_metadata.size() == 9

            assert iridanext_metadata.containsKey("sample1")
            assert iridanext_metadata.sample1.age_at_collection == "0.0000"

            assert iridanext_metadata.containsKey("sample2")
            assert iridanext_metadata.sample2.age_at_collection == "0.0027"

            assert iridanext_metadata.containsKey("sample3")
            assert iridanext_metadata.sample3.age_at_collection == "0.2493"

            assert iridanext_metadata.containsKey("sample4")
            assert iridanext_metadata.sample4.age_at_collection == "1.0000"

            assert iridanext_metadata.containsKey("sample5")
            assert iridanext_metadata.sample5.age_at_collection == "1.2493"

            assert iridanext_metadata.containsKey("sample6")
            assert iridanext_metadata.sample6.age_at_collection == "2"

            assert iridanext_metadata.containsKey("sample7")
            assert iridanext_metadata.sample7.age_at_collection == "2"

            assert iridanext_metadata.containsKey("sample8")
            assert iridanext_metadata.sample8.age_at_collection == "24"

            assert iridanext_metadata.containsKey("sample9")
            assert iridanext_metadata.sample9.age_at_collection == "49"
        }
    }

    test("Problems") {
        tag "pipeline_age"
        tag "pipeline_age_problems"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/age/problems.csv"
                outdir = "results"

                transformation = "age"
                metadata_1_header "date_of_birth"
                metadata_2_header "collection_date"
                age_header "age_at_collection"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check Transformation (Machine-Readable)
            def transformation = path("$launchDir/results/transformation/transformation.csv")
            assert transformation.exists()

            // Age column is removed because it's empty for all samples.
            assert transformation.text.contains("sample")
            assert transformation.text.contains("reverse_dates_under_2")
            assert transformation.text.contains("reverse_dates_over_2")
            assert transformation.text.contains("bad_format_1")
            assert transformation.text.contains("bad_format_2")
            assert transformation.text.contains("bad_format_3")
            assert transformation.text.contains("bad_format_4")
            assert transformation.text.contains("bad_format_5")
            assert transformation.text.contains("wrong_order_1")
            assert transformation.text.contains("wrong_order_2")
            assert transformation.text.contains("negative_date_1")
            assert transformation.text.contains("negative_date_2")
            assert transformation.text.contains("missing_date_1")
            assert transformation.text.contains("missing_date_2")

            // Check Results (Human-Readable)
            def results = path("$launchDir/results/transformation/results.csv")
            assert results.exists()

            assert results.text.contains("sample,sample_name,date_of_birth,collection_date,age_at_collection,age_at_collection_valid,age_at_collection_error")
            assert results.text.contains("reverse_dates_under_2,rd_1,2001-01-01,2000-01-01,,False,The dates are reversed")
            assert results.text.contains("reverse_dates_over_2,rd_2,2010-01-01,2000-01-01,,False,The dates are reversed")
            assert results.text.contains("bad_format_1,bf_1,00-01-01,2000-11-11,,False,The date format does not match the expected format (YYYY-MM-DD)")
            assert results.text.contains("bad_format_2,bf_2,2000-01-01,00-11-11,,False,The date format does not match the expected format (YYYY-MM-DD)")
            assert results.text.contains("bad_format_3,bf_3,2000/01/01,2000/11/11,,False,The date format does not match the expected format (YYYY-MM-DD)")
            assert results.text.contains("bad_format_4,bf_4,2000.01.01,2000.11.11,,False,The date format does not match the expected format (YYYY-MM-DD)")
            assert results.text.contains("bad_format_5,bf_5,2000-01-01,2000-11-11 23:59:59,,False,The date format does not match the expected format (YYYY-MM-DD)")
            assert results.text.contains("wrong_order_1,wo_1,2000-31-01,2000-01-02,,False,The date format does not match the expected format (YYYY-MM-DD)")
            assert results.text.contains("wrong_order_2,wo_2,2000-01-01,2000-31-02,,False,The date format does not match the expected format (YYYY-MM-DD)")
            assert results.text.contains("negative_date_1,nd_1,-2000-01-01,2001-01-01,,False,The date format does not match the expected format (YYYY-MM-DD)")
            assert results.text.contains("negative_date_2,nd_2,2000-01-01,-2001-01-01,,False,The date format does not match the expected format (YYYY-MM-DD)")
            assert results.text.contains("missing_date_1,md_1,,2001-01-01,,False,At least one of the dates is missing")
            assert results.text.contains("missing_date_2,md_2,2000-01-01,,,False,At least one of the dates is missing")

            // Check IRIDA Next JSON Output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "transformation/results.csv" }.size() == 1

            assert iridanext_metadata.size() == 13

            // Age column is removed because it's empty for all samples.
            assert iridanext_metadata.containsKey("reverse_dates_under_2")
            assert iridanext_metadata.reverse_dates_under_2.size() == 0

            assert iridanext_metadata.containsKey("reverse_dates_over_2")
            assert iridanext_metadata.reverse_dates_over_2.size() == 0

            assert iridanext_metadata.containsKey("bad_format_1")
            assert iridanext_metadata.bad_format_1.size() == 0

            assert iridanext_metadata.containsKey("bad_format_2")
            assert iridanext_metadata.bad_format_2.size() == 0

            assert iridanext_metadata.containsKey("bad_format_3")
            assert iridanext_metadata.bad_format_3.size() == 0

            assert iridanext_metadata.containsKey("bad_format_4")
            assert iridanext_metadata.bad_format_4.size() == 0

            assert iridanext_metadata.containsKey("bad_format_5")
            assert iridanext_metadata.bad_format_5.size() == 0

            assert iridanext_metadata.containsKey("wrong_order_1")
            assert iridanext_metadata.wrong_order_1.size() == 0

            assert iridanext_metadata.containsKey("wrong_order_2")
            assert iridanext_metadata.wrong_order_2.size() == 0

            assert iridanext_metadata.containsKey("negative_date_1")
            assert iridanext_metadata.negative_date_1.size() == 0

            assert iridanext_metadata.containsKey("negative_date_2")
            assert iridanext_metadata.negative_date_2.size() == 0

            assert iridanext_metadata.containsKey("missing_date_1")
            assert iridanext_metadata.missing_date_1.size() == 0

            assert iridanext_metadata.containsKey("missing_date_2")
            assert iridanext_metadata.missing_date_2.size() == 0
        }
    }

    test("Extra columns") {
        tag "pipeline_age"
        tag "pipeline_age_extra_columns"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/age/extra_columns.csv"
                outdir = "results"

                transformation = "age"
                metadata_1_header "date_of_birth"
                metadata_2_header "collection_date"
                age_header "age_at_collection"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check Transformation (Machine-Readable)
            def transformation = path("$launchDir/results/transformation/transformation.csv")
            assert transformation.exists()

            assert transformation.text.contains("sample,age_at_collection")
            assert transformation.text.contains("sample1,1.0000")
            assert transformation.text.contains("sample2,24")
            assert transformation.text.contains("sample3,49")

            // Check Results (Human-Readable)
            def results = path("$launchDir/results/transformation/results.csv")
            assert results.exists()

            assert results.text.contains("sample,sample_name,date_of_birth,collection_date,age_at_collection,age_at_collection_valid,age_at_collection_error")
            assert results.text.contains("sample1,ABC,2000-01-01,2000-12-31,1.0000,True,")
            assert results.text.contains("sample2,DEF,2000-02-29,2024-02-29,24,True,")
            assert results.text.contains("sample3,GHI,1950-12-31,2000-05-05,49,True,")

            // Check IRIDA Next JSON Output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "transformation/results.csv" }.size() == 1

            assert iridanext_metadata.size() == 3

            assert iridanext_metadata.containsKey("sample1")
            assert iridanext_metadata.sample1.age_at_collection == "1.0000"

            assert iridanext_metadata.containsKey("sample2")
            assert iridanext_metadata.sample2.age_at_collection == "24"

            assert iridanext_metadata.containsKey("sample3")
            assert iridanext_metadata.sample3.age_at_collection == "49"
        }
    }

    test("Success and failure mix") {
        tag "pipeline_age"
        tag "pipeline_age_success_failure_mix"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/age/success_failure_mix.csv"
                outdir = "results"

                transformation = "age"
                metadata_1_header "date_of_birth"
                metadata_2_header "collection_date"
                age_header "age_at_collection"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check Transformation (Machine-Readable)
            def transformation = path("$launchDir/results/transformation/transformation.csv")
            assert transformation.exists()

            assert transformation.text.contains("sample,age_at_collection")
            assert transformation.text.contains("sample1,1.0000")
            assert transformation.text.contains("sample2,24")
            assert transformation.text.contains("sample3,")

            // Check Results (Human-Readable)
            def results = path("$launchDir/results/transformation/results.csv")
            assert results.exists()

            assert results.text.contains("sample,sample_name,date_of_birth,collection_date,age_at_collection,age_at_collection_valid,age_at_collection_error")
            assert results.text.contains("sample1,ABC,2000-01-01,2000-12-31,1.0000,True,")
            assert results.text.contains("sample2,DEF,2000-02-29,2024-02-29,24,True,")
            assert results.text.contains("sample3,GHI,2000-05-05,1950-12-31,,False,The dates are reversed")

            // Check IRIDA Next JSON Output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "transformation/results.csv" }.size() == 1

            assert iridanext_metadata.size() == 3

            assert iridanext_metadata.containsKey("sample1")
            assert iridanext_metadata.sample1.age_at_collection == "1.0000"

            assert iridanext_metadata.containsKey("sample2")
            assert iridanext_metadata.sample2.age_at_collection == "24"

            assert iridanext_metadata.containsKey("sample3")
            assert iridanext_metadata.sample3.age_at_collection.size() == 0
        }
    }

    test("Spaces in headers") {
        tag "pipeline_age"
        tag "pipeline_age_spaces"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/age/basic.csv"
                outdir = "results"

                transformation = "age"
                metadata_1_header "date of birth"
                metadata_2_header "collection date"
                age_header "age at collection"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check Transformation (Machine-Readable)
            def transformation = path("$launchDir/results/transformation/transformation.csv")
            assert transformation.exists()

            assert transformation.text.contains("sample,age at collection")
            assert transformation.text.contains("sample1,0.0000")
            assert transformation.text.contains("sample2,0.0027")
            assert transformation.text.contains("sample3,0.2493")
            assert transformation.text.contains("sample4,1.0000")
            assert transformation.text.contains("sample5,1.2493")
            assert transformation.text.contains("sample6,2")
            assert transformation.text.contains("sample7,2")
            assert transformation.text.contains("sample8,24")
            assert transformation.text.contains("sample9,49")

            // Check Results (Human-Readable)
            def results = path("$launchDir/results/transformation/results.csv")
            assert results.exists()

            assert results.text.contains("sample,sample_name,date of birth,collection date,age at collection,age at collection_valid,age at collection_error")
            assert results.text.contains("sample1,ABC,2000-01-01,2000-01-01,0.0000,True,")
            assert results.text.contains("sample2,DEF,2000-01-01,2000-01-02,0.0027,True,")
            assert results.text.contains("sample3,GHI,2000-01-01,2000-04-01,0.2493,True,")
            assert results.text.contains("sample4,JKL,2000-01-01,2000-12-31,1.0000,True,")
            assert results.text.contains("sample5,MNO,2000-01-01,2001-04-01,1.2493,True,")
            assert results.text.contains("sample6,PQR,2000-01-01,2001-12-31,2,True,")
            assert results.text.contains("sample7,STU,2000-01-01,2002-01-01,2,True,")
            assert results.text.contains("sample8,VWX,2000-02-29,2024-02-29,24,True,")
            assert results.text.contains("sample9,YZ,1950-12-31,2000-05-05,49,True,")

            // Check IRIDA Next JSON Output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "transformation/results.csv" }.size() == 1

            assert iridanext_metadata.size() == 9

            assert iridanext_metadata.containsKey("sample1")
            assert iridanext_metadata.sample1."age at collection" == "0.0000"

            assert iridanext_metadata.containsKey("sample2")
            assert iridanext_metadata.sample2."age at collection" == "0.0027"

            assert iridanext_metadata.containsKey("sample3")
            assert iridanext_metadata.sample3."age at collection" == "0.2493"

            assert iridanext_metadata.containsKey("sample4")
            assert iridanext_metadata.sample4."age at collection" == "1.0000"

            assert iridanext_metadata.containsKey("sample5")
            assert iridanext_metadata.sample5."age at collection" == "1.2493"

            assert iridanext_metadata.containsKey("sample6")
            assert iridanext_metadata.sample6."age at collection" == "2"

            assert iridanext_metadata.containsKey("sample7")
            assert iridanext_metadata.sample7."age at collection" == "2"

            assert iridanext_metadata.containsKey("sample8")
            assert iridanext_metadata.sample8."age at collection" == "24"

            assert iridanext_metadata.containsKey("sample9")
            assert iridanext_metadata.sample9."age at collection" == "49"
        }
    }

    test("Float columns") {
        tag "pipeline_age"
        tag "pipeline_age_float_columns"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/age/float_columns.csv"
                outdir = "results"

                transformation = "age"
                metadata_1_header "date_of_birth"
                metadata_2_header "collection_date"
                age_header "age_at_collection"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check Transformation (Machine-Readable)
            def transformation = path("$launchDir/results/transformation/transformation.csv")
            assert transformation.exists()

            assert transformation.text.contains("sample")
            assert transformation.text.contains("sample1")
            assert transformation.text.contains("sample2")
            assert transformation.text.contains("sample3")

            // Check Results (Human-Readable)
            def results = path("$launchDir/results/transformation/results.csv")
            assert results.exists()

            assert results.text.contains("sample,sample_name,date_of_birth,collection_date,age_at_collection,age_at_collection_valid,age_at_collection_error")
            assert results.text.contains("sample1,ABC,1.1,1.2,,False,The date format does not match the expected format (YYYY-MM-DD)")
            assert results.text.contains("sample2,DEF,2.1,2.2,,False,The date format does not match the expected format (YYYY-MM-DD)")
            assert results.text.contains("sample3,GHI,3.1,3.2,,False,The date format does not match the expected format (YYYY-MM-DD)")

            // Check IRIDA Next JSON Output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "transformation/results.csv" }.size() == 1

            assert iridanext_metadata.size() == 3

            assert iridanext_metadata.containsKey("sample1")
            assert iridanext_metadata.sample1.containsKey("age_at_collection") == false

            assert iridanext_metadata.containsKey("sample2")
            assert iridanext_metadata.sample2.containsKey("age_at_collection") == false

            assert iridanext_metadata.containsKey("sample3")
            assert iridanext_metadata.sample3.containsKey("age_at_collection") == false
        }
    }
}
